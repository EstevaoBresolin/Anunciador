@page "/meusAnuncios"

@inject IJSRuntime JS
@inject ISnackbar Snackbar
@inject FirestoreService FirestoreService
@inject NavigationManager Navigation

@using AnunciadorV1.Models
@using AnunciadorV1.Services


<MudContainer MaxWidth="MaxWidth.Medium" Class="mt-6">
    <MudText Typo="Typo.h4" GutterBottom="true">Meus Anúncios</MudText>

    @if (anunciantes is null)
    {
        <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
    }
    else if (!anunciantes.Any())
    {
        <MudAlert Severity="Severity.Info" Elevation="0">Nenhum anúncio encontrado.</MudAlert>
    }
    else
    {
        <MudGrid GutterSize="3">
            @foreach (var a in anunciantes)
            {
                <MudItem xs="12" sm="6">
                    <MudCard Elevation="4" Class="h-100">
                        <MudCardContent>
                            <MudText Typo="Typo.h6">Titulo: @a.Titulo</MudText>
                            <MudText Typo="Typo.body2">Nome: @a.Nome</MudText>
                            <MudText Typo="Typo.body2">Descrição: @a.Descricao</MudText>
                        </MudCardContent>
                        <MudCardActions Class="justify-end">
                            <MudButton Style="margin-right: 0.5rem; background-color: royalblue; color: white;" Variant="Variant.Filled" OnClick="() => Editar(a.Id)">Editar</MudButton>
                            <MudButton Variant="Variant.Outlined" Color="Color.Error" OnClick="() => Excluir(a.Id)">Excluir</MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            }
        </MudGrid>
    }
</MudContainer>

@code {
    private MudForm? form;
    private string? mensagem;

    private List<Anunciante>? anunciantes;

    private ElementReference inputFileRef;
    private ElementReference inputFileRefe;

    private bool usuarioAutenticado = false;

    private Anunciante novoAnunciante = new Anunciante();
    private EnumCategorias Categoria { get; set; } = EnumCategorias.Selecionar;

    protected override async Task OnInitializedAsync()
    {
        anunciantes = await FirestoreService.GetAnunciosUsuario();
    }

    private async Task HandleFileSelected(ChangeEventArgs e)
    {
        string nomeArquivo = $"anunciantes/{novoAnunciante.Nome}{Guid.NewGuid()}.jpg";
        novoAnunciante.EnderecoFoto = await FirestoreService.UploadImagemFromInput(inputFileRef, nomeArquivo);
        StateHasChanged(); // força renderização para mostrar a imagem
    }

    private async Task Cadastrar()
    {
        if (String.IsNullOrEmpty(novoAnunciante.Nome))
        {
            Snackbar.Add("Por Favor, preencha o Nome", Severity.Error, c => c.HideIcon = true);
            return;
        }
        else if (String.IsNullOrEmpty(novoAnunciante.Titulo))
        {
            Snackbar.Add("Por Favor, preencha o Título", Severity.Error, c => c.HideIcon = true);
            return;
        }
        else if (String.IsNullOrEmpty(novoAnunciante.Descricao))
        {
            Snackbar.Add("Por Favor, preencha a Descrição", Severity.Error, c => c.HideIcon = true);
            return;
        }
        else if (String.IsNullOrEmpty(novoAnunciante.Endereco))
        {
            Snackbar.Add("Por Favor, preencha o Endereço", Severity.Error, c => c.HideIcon = true);
            return;
        }
        else if (novoAnunciante.Numero == 0)
        {
            Snackbar.Add("Por Favor, preencha o Número de Contato", Severity.Error, c => c.HideIcon = true);
            return;
        }
        else if (Categoria == EnumCategorias.Selecionar)
        {
            Snackbar.Add("Por Favor, Selecione uma categoria", Severity.Error, c => c.HideIcon = true);
            return;
        }
        if (string.IsNullOrEmpty(novoAnunciante.EnderecoFoto))
        {
            Snackbar.Add("Por Favor, Adicione uma foto", Severity.Error, c => c.HideIcon = true);
            return;
        }
        // string nomeArquivo = $"anunciantes/{novoAnunciante.Nome}{Guid.NewGuid()}.jpg";
        // novoAnunciante.EnderecoFoto = await FirestoreService.UploadImagemFromInput(inputFileRef, nomeArquivo);
        novoAnunciante.Categoria = (int)Categoria;
        novoAnunciante.AtivoInativo = true;
        novoAnunciante.UidUsuario = await FirestoreService.GetCurrentUserId();
        // novoAnunciante.EnderecoFoto = url;
        await FirestoreService.AddAnunciante(novoAnunciante);

        mensagem = "Anunciante cadastrado com sucesso!";
        novoAnunciante = new Anunciante(); // Limpa o formulário
        inputFileRef = inputFileRefe;
        Categoria = 0;
    }

    private void Editar(string id)
    {
        Navigation.NavigateTo($"/editarAnunciante/{id}");
    }

    private async void Excluir(string id)
    {
        await FirestoreService.ExcluirAnuncio(id);

        anunciantes = await FirestoreService.GetAnunciosUsuario();

        StateHasChanged();
    }

    private async Task Logout()
    {
        await FirestoreService.Logout();
        usuarioAutenticado = false;
    }

    public class AnuncianteModel
    {
        public string Nome { get; set; } = "";
        public string Titulo { get; set; } = "";
        public string Descricao { get; set; } = "";
        public string Endereco { get; set; } = "";
        public int Numero { get; set; } = 0;
        public string Instagram { get; set; } = "";
        public int Categoria { get; set; }
    }
}

<style>
    #selectfs3sr1xm {
        width: 270px;
    }</style>