@page "/produtos"
@using AnunciadorV1.Models
@using AnunciadorV1.Services
@inject IJSRuntime _jsRuntime
@inject NavigationManager Navigation
@inject FirestoreService FirestoreService
@inject ISnackbar Snackbar

<PageTitle>Assinaturas</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-6">
    <MudText Typo="Typo.h4" Style="font-size: 28px; text-align: center !important;" Class="mb-4">Escolha sua assinatura</MudText>
    @if(redirecionando){
        <div style="display: flex; flex-direction: column; justify-content: center; align-items: center; gap: 1rem;">
            <MudProgressCircular Indeterminate="true" />
            <p style="text-align:center;"> Redirecionando... </p>
        </div>
    }
    else{
        @if (produtos == null)
        {
            <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
        }
        else
        {
            <MudGrid Style="justify-content: center !important;">
                @foreach (var produto in produtos)
                {
                    <MudItem xs="12" sm="6">
                        <MudCard Class="rounded-xl shadow-lg">
                            <MudCardContent>
                                @* <MudText Typo="Typo.h6">@produto.Name</MudText> *@
                                <MudStack Spacing="3" Class="mt-2">
                                    @foreach (var preco in produto.Precos)
                                    {
                                        <MudPaper Elevation="1" Class="p-3 d-flex justify-between align-center rounded-lg" Style="background-color: #f9f9f9; height: 170px;">
                                            <MudStack Style="align-items: center; justify-content: space-between" Class="w-100">
                                                <MudText>
                                                    @* <MudIcon Icon="@Icons.Material.Filled.StarOutline" Class="mr-1" /> *@
                                                    @preco.Description
                                                </MudText>
                                                <MudText Color="Color.Primary" Class="font-weight-bold">
                                                    @FormatarPreco(preco.UnitAmount, preco.Currency)
                                                </MudText>
                                                <MudButton OnClick="() => CriarSessaoCheckoutAsync(preco.Id)" Color="Color.Primary" Variant="Variant.Filled" Size="Size.Small">
                                                    Assinar
                                                </MudButton>
                                            </MudStack>
                                        </MudPaper>
                                    }
                                </MudStack>
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                }
            </MudGrid>
        }
    }

</MudContainer>

@code {
    private List<Produto> produtos;
    private User infos = new User();

    private bool redirecionando = false;

    protected override async Task OnInitializedAsync()
    {
        produtos = await FirestoreService.GetProdutos();
    }

    private string FormatarPreco(decimal? valor, string currency)
    {
        return string.Format(new System.Globalization.CultureInfo("pt-BR"), "{0:C}", valor / 100);
    }

    private async Task CriarSessaoCheckoutAsync(string precoId)
    {
        try
        {
            redirecionando = true;

            // Pega o usuário logado
            var userUid = await _jsRuntime.InvokeAsync<string>("firebaseService.getCurrentUserUid");

            if (string.IsNullOrEmpty(userUid))
            {
                Snackbar.Add("Faça login, antes de escolher uma assinatura", Severity.Success);

                Navigation.NavigateTo("login");

                // await _jsRuntime.InvokeVoidAsync("alert", "Usuário não está logado.");
                return;
            }

            infos = await FirestoreService.GetStatusAssinatura();
            if (infos != null && infos.Status == "active")
            {
                Snackbar.Add("Você já possui uma assinatura ativa. Se deseja alterar sua assinatura, vá para minha conta", Severity.Success);
                redirecionando = false;

                return;
            }

            // Monta os dados para criar a sessão
            var sessionData = new Dictionary<string, object>
            {
                { "price", precoId },
                { "success_url", Navigation.BaseUri },
                { "cancel_url", Navigation.BaseUri }
            };

            // Cria o documento em /customers/{uid}/checkout_sessions
            var sessionResult = await _jsRuntime.InvokeAsync<SessionResult>("firebaseService.addCheckoutSession", userUid, sessionData);

            // Escuta mudanças no documento
            var dotNetRef = DotNetObjectReference.Create(this);
            await _jsRuntime.InvokeVoidAsync("firebaseService.listenToCheckoutSession", userUid, sessionResult.Id, dotNetRef);

        }
        catch (Exception ex)
        {
            redirecionando = false;
            Console.WriteLine($"Erro ao criar sessão de checkout: {ex.Message}");
        }
        finally{
            await Task.Delay(2000);
            redirecionando = false;
        }
    }

    [JSInvokable]
    public async Task OnCheckoutSessionChanged(Dictionary<string, object> docData)
    {
        if (docData != null)
        {
            if (docData.ContainsKey("error"))
            {
                var error = docData["error"] as Dictionary<string, object>;
                var errorMessage = error?["message"]?.ToString();
                _ = _jsRuntime.InvokeVoidAsync("alert", $"Ocorreu um erro: {errorMessage}");
            }
            else if (docData.ContainsKey("url"))
            {
                var url = docData["url"]?.ToString();
                if (!string.IsNullOrEmpty(url))
                {
                    _ = _jsRuntime.InvokeVoidAsync("window.location.assign", url);
                }
            }
        }
    }

    public class SessionResult
    {
        public string Id { get; set; }
        public string Path { get; set; }
    }

}
