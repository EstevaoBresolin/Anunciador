@page "/editarAnunciante/{id}"

@inject IJSRuntime JS
@inject ISnackbar Snackbar
@inject FirestoreService FirestoreService
@inject NavigationManager Navigation

@using AnunciadorV1.Models
@using AnunciadorV1.Services

<MudContainer>
    <MudCard Class="p-4">
        <MudCardHeader>
            <MudText Typo="Typo.h5">Cadastro de Anunciante</MudText>
        </MudCardHeader>
        <MudCardContent>
            <MudForm Model="@novoAnunciante" >
                <MudGrid Spacing="3">
                    <MudItem xs="12" md="6">
                        <MudTextField Label="Nome" @bind-Value="novoAnunciante.Nome" MaxLength="50" Required="true" RequiredError="O nome é obrigatório." />
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <MudTextField Label="Título" @bind-Value="novoAnunciante.Titulo" MaxLength="50" Required="true" RequiredError="O título é obrigatório." />
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <MudTextField Label="Descrição" @bind-Value="novoAnunciante.Descricao" MaxLength="100" Required="true" RequiredError="A descrição é obrigatória." />
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <MudTextField Label="Endereço" @bind-Value="novoAnunciante.Endereco" MaxLength="200" Required="true" RequiredError="O endereço é obrigatório." />
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <MudNumericField Label="Número de Contato" @bind-Value="novoAnunciante.Numero" Required="true" RequiredError="O número de contato é obrigatório." />
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <MudTextField Label="Instagram" @bind-Value="novoAnunciante.Instagram" />
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <MudSelect  @bind-Value="Categoria" Label="Categoria" AdornmentColor="Color.Inherit" Variant="Variant.Outlined">
                            @foreach (EnumCategorias item in Enum.GetValues(typeof(EnumCategorias)))
                            {
                                <MudSelectItem Value="@item">@item.GetDescription()</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                    @if (!String.IsNullOrEmpty(novoAnunciante.Nome)){
                        <input style=" margin-top: 30px; margin-left: 10px;" type="file" @ref="inputFileRef" @onchange="HandleFileSelected" />
                    }

                    @if (!String.IsNullOrEmpty(novoAnunciante.EnderecoFoto))
                    {
                        <MudItem xs="12">
                            <img src="@novoAnunciante.EnderecoFoto" alt="Pré-visualização da imagem" style="max-width: 300px; height: auto;" />
                        </MudItem>
                    }
                    <MudItem xs="12">
                        <MudButton OnClick="Cadastrar" Color="Color.Primary">Cadastrar</MudButton>
                    </MudItem>
                </MudGrid>
            </MudForm>

            @if (!string.IsNullOrEmpty(mensagem))
            {
                <MudAlert Severity="Severity.Success" Dense="true" Class="mt-2">@mensagem</MudAlert>
            }
        </MudCardContent>
    </MudCard>
</MudContainer>
@* }
else
{

    <MudAlert Severity="Severity.Warning">Faça login para acessar esta página.</MudAlert>
} *@

@code {
    private MudForm? form;
    private string? mensagem;

    private List<Anunciante>? anunciantes;

    private ElementReference inputFileRef;
    private ElementReference inputFileRefe;

    private bool usuarioAutenticado = false;

    private Anunciante novoAnunciante = new Anunciante();
    private EnumCategorias Categoria { get; set; } = EnumCategorias.Selecionar;

    [Parameter]
    public string id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        novoAnunciante = await FirestoreService.GetAnuncioPorId(id);
        Categoria = (EnumCategorias)novoAnunciante.Categoria;
        // novoAnunciante = anunciantes[0];
    }

    private async Task HandleFileSelected(ChangeEventArgs e)
    {
        string nomeArquivo = $"anunciantes/{novoAnunciante.Nome}{Guid.NewGuid()}.jpg";
        novoAnunciante.EnderecoFoto = await FirestoreService.UploadImagemFromInput(inputFileRef, nomeArquivo);
        StateHasChanged(); // força renderização para mostrar a imagem
    }

    private async Task Cadastrar()
    {
        if (String.IsNullOrEmpty(novoAnunciante.Nome)){
            Snackbar.Add("Por Favor, preencha o Nome", Severity.Error, c => c.HideIcon = true);
            return;
        }
        else if (String.IsNullOrEmpty(novoAnunciante.Titulo))
        {
            Snackbar.Add("Por Favor, preencha o Título", Severity.Error, c => c.HideIcon = true);
            return;
        }
        else if (String.IsNullOrEmpty(novoAnunciante.Descricao))
        {
            Snackbar.Add("Por Favor, preencha a Descrição", Severity.Error, c => c.HideIcon = true);
            return;
        }
        else if (String.IsNullOrEmpty(novoAnunciante.Endereco))
        {
            Snackbar.Add("Por Favor, preencha o Endereço", Severity.Error, c => c.HideIcon = true);
            return;
        }
        else if (novoAnunciante.Numero == 0)
        {
            Snackbar.Add("Por Favor, preencha o Número de Contato", Severity.Error, c => c.HideIcon = true);
            return;
        }
        else if (Categoria == EnumCategorias.Selecionar){
            Snackbar.Add("Por Favor, Selecione uma categoria", Severity.Error, c => c.HideIcon = true);
            return;
        }
        if (string.IsNullOrEmpty(novoAnunciante.EnderecoFoto))
        {
            Snackbar.Add("Por Favor, Adicione uma foto", Severity.Error, c => c.HideIcon = true);
            return;
        }
        // string nomeArquivo = $"anunciantes/{novoAnunciante.Nome}{Guid.NewGuid()}.jpg";
        // novoAnunciante.EnderecoFoto = await FirestoreService.UploadImagemFromInput(inputFileRef, nomeArquivo);
        novoAnunciante.Categoria = (int)Categoria;
        // novoAnunciante.AtivoInativo = true;
        novoAnunciante.UidUsuario = await FirestoreService.GetCurrentUserId();
        // novoAnunciante.EnderecoFoto = url;
        await FirestoreService.UpdateAnunciante(novoAnunciante, id);

        mensagem = "Anuncio editado com sucesso!";
        // novoAnunciante = new Anunciante(); // Limpa o formulário
        // inputFileRef = inputFileRefe;
        // Categoria = 0;
    }

    private void Editar(string id)
    {
        Navigation.NavigateTo($"/editar/{id}");
    }

    private async Task Logout()
    {
        await FirestoreService.Logout();
        usuarioAutenticado = false;
    }
   
}

<style>
    #selectfs3sr1xm{
       width: 270px;
    }</style>